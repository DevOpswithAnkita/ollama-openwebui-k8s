---
- name: Ollama Deployment on Kind Cluster
  hosts: all
  become: yes
  vars:
    k8s_dir: /home/ubuntu/k8s-Deployment
    kubeconfig: /home/ubuntu/.kube/config
    namespace: ai-deployment
  tasks:
    - name: Ping all hosts
      ansible.builtin.ping:

    - name: Add ubuntu to docker group
      ansible.builtin.user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Fix Docker socket permissions
      ansible.builtin.file:
        path: /var/run/docker.sock
        mode: '0666'

    - name: Create k8s-Deployment directory
      ansible.builtin.file:
        path: "{{ k8s_dir }}"
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Copy all deployment files
      ansible.builtin.copy:
        src: ../k8s-Deployment/
        dest: "{{ k8s_dir }}/"
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        remote_src: no

    - name: Create .kube directory
      ansible.builtin.file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Check if Kind cluster exists
      ansible.builtin.command: kind get clusters
      register: kind_clusters
      changed_when: false

    - name: Delete existing Kind cluster if it exists
      ansible.builtin.shell: kind delete cluster --name kind
      when: "'kind' in kind_clusters.stdout"

    - name: Create Kind cluster
      ansible.builtin.shell: kind create cluster --name kind --config {{ k8s_dir }}/kind-config.yml
      
    - name: Export Kind kubeconfig
      ansible.builtin.shell: kind get kubeconfig --name kind > {{ kubeconfig }}
      args:
        executable: /bin/bash

    - name: Fix kubeconfig permissions
      ansible.builtin.file:
        path: "{{ kubeconfig }}"
        owner: ubuntu
        group: ubuntu
        mode: '0600'

    - name: Verify cluster nodes
      ansible.builtin.shell: kubectl get nodes
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    - name: Create namespace
      ansible.builtin.shell: kubectl create namespace {{ namespace }} || true
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    - name: Apply PVC
      ansible.builtin.shell: kubectl apply -f {{ k8s_dir }}/ollama-shared-pvc.yaml -n {{ namespace }}
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    - name: Deploy Ollama
      ansible.builtin.shell: kubectl apply -f {{ k8s_dir }}/ollama-deploy.yml -n {{ namespace }}
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    - name: Deploy OpenWebUI
      ansible.builtin.shell: kubectl apply -f {{ k8s_dir }}/openwebui-deploy.yml -n {{ namespace }}
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    - name: Wait for Ollama pod to be ready
      ansible.builtin.shell: |
        kubectl wait --for=condition=Ready pod -l app=ollama -n {{ namespace }} --timeout=300s
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    - name: Get Ollama pod name
      ansible.builtin.shell: kubectl get pods -n {{ namespace }} -l app=ollama -o jsonpath='{.items[0].metadata.name}'
      register: ollama_pod
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    - name: Install Llama2 model in Ollama pod
      ansible.builtin.shell: kubectl exec {{ ollama_pod.stdout }} -n {{ namespace }} -- ollama pull llama2:latest
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    - name: List installed models in Ollama pod
      ansible.builtin.shell: kubectl exec {{ ollama_pod.stdout }} -n {{ namespace }} -- ollama list
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    - name: Get all resources in namespace
      ansible.builtin.shell: kubectl get all -n {{ namespace }}
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
